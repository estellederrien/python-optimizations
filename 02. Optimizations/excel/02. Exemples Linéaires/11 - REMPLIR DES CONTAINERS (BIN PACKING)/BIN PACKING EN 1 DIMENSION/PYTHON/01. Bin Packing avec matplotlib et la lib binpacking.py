
# Source : https://towardsdatascience.com/4-steps-to-easily-allocate-resources-with-python-bin-packing-5933fb8e53a9

# Librarie : https://pypi.org/project/binpacking/

''' 0. Une br√®ve introduction au probl√®me

Supposons que vous ayez m articles de poids (ou de valeur) diff√©rents que vous devez placer dans 

n bacs √©quilibr√©s √©gaux (Fig.1).

C'est ce qu'on appelle g√©n√©ralement le probl√®me d'emballage du bac.

Le BPP est class√© par la th√©orie de la complexit√© computationnelle comme un probl√®me 

NP-difficile qui, pour faire court, est aussi difficile que le probl√®me le plus difficile √† r√©soudre en temps 

polynomial non d√©terministe (probl√®me NP).

Tr√®s simple, n'est-ce pas ? ‚Ä¶ 

Bien que ces mots puissent sembler √† la limite de la compr√©hension 

(je peux vous jurer qu'il n'y a pas de fautes de frappe dans les phrases pr√©c√©dentes), 

le probl√®me de Bin Packing se produit souvent dans la vie quotidienne.

Voici quelques exemples:

    Vous √™tes au supermarch√©. Vous venez de payer et vous devez mettre tous les m produits dans le plus 
    petit nombre de n sacs en essayant de les remplir au maximum et de mani√®re √©quilibr√©e.

    üëî Vous √™tes un chef de projet qui a besoin de doter m ressources pour n projets. 
    En supposant des projets tout aussi complexes, votre objectif sera - probablement - 
    d'atteindre des groupes √©quilibr√©s en connaissant une valeur de contribution estim√©e de vos ressources.

    üö£‚Äç‚ôÇÔ∏è Vous pr√©voyez une sortie en bateau avec des amis. Malheureusement, les bateaux ont une charge maximale. 
    Vous devrez forc√©ment r√©partir vos m amis √† parts √©gales sur les n bateaux √† votre disposition.

Oui. Comme son nom l'indique, le probl√®me de l'emballage des bacs survient chaque fois que nous devons ¬´ remplir ¬ª 
quelque chose avec autre chose.

Comme vous pouvez l'imaginer, il existe des variantes √† n dimensions qui prennent en compte 
d'autres informations utiles telles que le volume ou le co√ªt (probl√®me du sac √† dos).

'''

''' 1. Il est temps de mettre la table : le pack binpacking

Commen√ßons √† chauffer les moteurs. Nous allons utiliser uniquement ces deux packages :

    matplotlib : le package de visualisation ultra populaire ;
    binpacking : un package de r√©solution de probl√®mes de binpacking gourmand ;

Pour les installer, tapez simplement ceci dans l'invite de commande üíª :

pip installer binpacking matplotlib

Et voil√†. Fait! '''

import binpacking
import matplotlib.pyplot as plt

 

''' les param√®tres

Voici une de mes √©tapes pr√©f√©r√©es : la d√©finition des param√®tres.

üóëÔ∏è D√©finissons d'abord le nombre de bacs que nous voulons, puis le dictionnaire contenant 

la valeur estim√©e/mesur√©e des ressources √† notre disposition.

Nous aurons 21 ressources √† doter de 6 projets. üë®üë©üëßüë¶ '''



# Number of desidered equal balanced bins
numberOfBins = 6

# Your dictionary of Resources:
#   - Key: Resource name
#   - Value: Resource contribution value
resources = {
    "A" : 5, "B" : 5, "C" : 3, "D" : 4, 
    "E" : 4, "F" : 1, "G" : 4, "H" : 5, 
    "I" : 4, "L" : 3, "M" : 3, "N" : 4,
    "O" : 3, "P" : 2, "Q" : 3, "R" : 1,
    "S" : 5, "T" : 2, "U" : 5, "V" : 3,
    "Z" : 1,
}
# A chaque cl√© du dictionnaire correspondra l'estimation de la valeur de contribution de cette ressource. 

# Oui, une sorte de score.


''' 
4. D√©ballez le probl√®me d'emballage du bac

Compte tenu de l'extr√™me complexit√© de la recherche de la solution optimale dans les probl√®mes NP-difficiles, 

nous ne pourrions pas r√©ussir sans une approche gloutonne. 

Ici entre en jeu le paquet binpacking.

   Les algorithmes gloutonnes permettent d'arriver √† des solutions de probl√®mes difficiles 
   
   de mani√®re approximative mais acceptable. Bref, avec des approches gourmandes, 
   
   on paie la solution du probl√®me au d√©triment de sa pr√©cision.

D'accord, j'aime √ßa. C'est pour nous. ‚úåÔ∏è

L'utilisation du pack est extr√™mement simple. '''



groups = binpacking.to_constant_bin_number(resources, numberOfBins)
print("##########Groups")
print(groups)

# prints:
# [
#   {'A': 5, 'E': 4, 'Q': 3},
#   {'U': 5, 'G': 4, 'P': 2, 'F': 1},
#   {'B': 5, 'N': 4, 'T': 2, 'R': 1},
#   {'S': 5, 'C': 3, 'L': 3, 'Z': 1},
#   {'H': 5, 'M': 3, 'V': 3},
#   {'I': 4, 'D': 4, 'O': 3}
# ]

# chaque ligne est un conteneur et on voit ce qu'il contient ainsi que la valeur de ce qu'il contient

''' Fait! Incroyablement indolore. Essayons de visualiser le r√©sultat d'une mani√®re diff√©rente

 en nettoyant les valeurs √† l'aide d'une compr√©hension de liste.

 '''

resourcesPerGroups = [list(group.keys()) for group in groups]
print("##################resourcesPerGroups")
print(resourcesPerGroups)
# prints
# [
#  ['A', 'E', 'Q'], 
#  ['U', 'G', 'P', 'F'],
#  ['B', 'N', 'T', 'R'],
#  ['S', 'C', 'L', 'Z'],
#  ['H', 'M', 'V'],
#  ['I', 'D', 'O']
#]
''' Nous avons dot√© toutes les ressources et cr√©√© 6 groupes (probablement) √©quilibr√©s.

D'accord, mais il est maintenant temps de voir comment l'algorithme a fonctionn√©. 

Voyons si les groupes sont vraiment √©quilibr√©s entre eux.

5. Explorons les r√©sultats

Ce que nous attendons, ce sont 6 groupes chacun avec une valeur totale tr√®s proche 

de la somme des valeurs totales divis√©e par le nombre de groupes.

Il est donc facile de calculer la valeur id√©ale par groupe et les valeurs des groupes trouv√©s.'''
print("##################ressources values")
np =  list(resources.values())
print(np)

# Ideal average desired value , La valeur moyenne que l'on voudrait placer dans caque container
idealValue = (sum(np) / numberOfBins)    #    11.666
print("##################idealValue")
print(idealValue)


# Value of the groups obtained - On regarde la valeur totale des objets dans chaque container 
realValues = [sum(list(group.values())) for group in groups]
print("##################irealValues")
print(realValues)

''' Voici le graphique : 

la ligne horizontale rouge repr√©sente la valeur moyenne 

id√©ale souhait√©e pour chaque groupe (Fig.2). '''

fig, ax = plt.subplots(1, 1, figsize = (16,6))


# Plots
ax.bar(x = range(numberOfBins), height = realValues, color="#408090")
ax.hlines(idealValue, -1, numberOfBins, colors="#995050", linewidths=5)

# Style
ax.set_xlim(-1,numberOfBins); ax.set_ylim(0,max(realValues)+2)
ax.set_xticklabels(" 123456 ")
ax.set_xlabel("Groups")
ax.set_ylabel("Weight/Value")

plt.show()

''' Ta daa ! Comme nous l'avions pr√©vu, nous avons constitu√© 6 groupes √©quilibr√©s. 

Chaque groupe a en effet un score tr√®s proche de l'idealValue (11,666). 

Je pense que l'objectif est (approximativement) atteint.   

Rappelons, en effet, que ce que nous avons obtenu est une solution compatible avec 

notre probl√®me mais pas optimale, puisque nous avons utilis√© un algorithme glouton. '''


''' -1. Conclusion

Bref, le probl√®me du Bin Packing est vraiment tr√®s courant dans la vie de tous les jours.
Les approches gourmandes comme celle que nous venons de voir

 (l'emballage en bacs peut √™tre r√©solu en utilisant diff√©rentes approches gourmandes) peuvent 
 
 s'av√©rer utiles dans de nombreuses occasions, surtout si elles sont extr√™mement faciles √† mettre en ≈ìuvre.

Quelques pistes de r√©flexion ? Et si on voulait essayer de prendre en compte le co√ªt des articles ? 

Et si on voulait aussi int√©grer une 2e ou 3e dimension ?

Probablement le simple 1D Bin Packing conviendrait un peu √† l'√©troit.

Je pense qu'on devrait en parler dans les prochains articles‚Ä¶ Alors, restez connect√©s ! üòâ '''

